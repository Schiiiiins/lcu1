<ui>
  <page id="iotimer" font="fonts/decker.ttf" font_height="16" onload="OnPageLoad">
    <elements>
      <image id="background" x="0" y="0" file="images/background.png"/>
      <image id="logo" x="5" y="5" file="images/logo.png"/>
      
      <text id="title" x="232" y="7" height="15" text="Timer" center="true"/>
      <text id="subtitle" x="232" y="22" height="15" center="true"/>
      
      <text id="label_date" x="10" y="53" text="Starttag:"/>
      <image id="box_date" x="86" y="47" file="images/textbox_96.png" onclick="code:OnDateClick"/>
      <text id="date" x="134" y="52" text="01.08.2010" center="true"/>
      <image id="date_up" x="232" y="45" file="images/arrow_u.png" onclick="code:OnDateStepClick"/>
      <image id="date_down" x="272" y="45" file="images/arrow_d.png" onclick="code:OnDateStepClick"/>
      
      <text id="label_time" x="10" y="92" text="Startzeit:"/>
      <image id="box_time" x="118" y="86" file="images/textbox_64.png" onclick="code:OnTimeClick"/>
      <text id="time" x="150" y="91" text="13:30" center="true"/>
      <text id="unit_time" x="186" y="92" height="14" text="hh:mm"/>
      <image id="time_up" x="232" y="84" file="images/arrow_u.png" onclick="code:OnTimeStepClick"/>
      <image id="time_down" x="272" y="84" file="images/arrow_d.png" onclick="code:OnTimeStepClick"/>
      
      
      <image id="check_duration" x="-2" y="116" onclick="code:OnCheckDurationClick">
            <file>images/checkbox_off.png</file>
            <file>images/checkbox_on.png</file>
      </image>
      <text id="label_duration" x="39" y="130" text="aus nach:"/>
      <image id="box_duration" x="118" y="125" file="images/textbox_64.png" onclick="code:OnDurationClick"/>
      <text id="duration" x="150" y="130" text="00:30" center="true"/>
      <text id="unit_duration" x="186" y="131" height="14" text="hh:mm"/>
      <image id="duration_up" x="232" y="123" file="images/arrow_u.png" onclick="code:OnDurationStepClick"/>
      <image id="duration_down" x="272" y="123" file="images/arrow_d.png" onclick="code:OnDurationStepClick"/>

      <image id="check_daily" x="-2" y="154" onclick="code:OnCheckDailyClick">
            <file>images/checkbox_off.png</file>
            <file>images/checkbox_on.png</file>
      </image>
      <text id="label_daily" x="39" y="168" text="täglich"/>

      <image id="ok" x="165" y="161" file="images/button_140.png" onclick="code:OnNowClick"/>
      <text x="232" y="168" text="Jetzt" center="true"/>
      
      <image id="back" x="10" y="199" file="images/button_140.png" onclick="code:OnCancelClick"/>
      <text x="77" y="206" text="Zurück" center="true"/>

      <image id="ok" x="165" y="199" file="images/button_140.png" onclick="code:OnOkClick"/>
      <text x="232" y="206" text="Bestätigen" center="true"/>
      
    </elements>
    <triggers>
    </triggers>
    <code><![CDATA[
    
        variable control_value_time ""
        variable control_value_duration ""
        variable control_value_use_duration ""
        variable control_value_daily ""
        
        proc OnPageLoad { previousPage reason } {
            variable numpad_control
            variable control_value_time
            variable control_value_duration 
            variable control_value_use_duration 
            variable control_value_daily
            
            if { "$previousPage" == "numpad" } {
                ui set ${numpad_control}.text $numpad::value
            } else {
                if { [string length $control_value_daily] } {
                    set daily_visible 1
                    set daily [control get $control_value_daily]
                } else {
                    set daily_visible 0
                    set daily 0
                }
                ui set check_daily.index $daily
                set seconds [control get $control_value_time]
                ui set time.text [format_time $seconds]
                ui set date.text [format_date $seconds]
                if { [string length $control_value_use_duration] && [string length $control_value_duration] } {
                    ui set check_duration.index [control get $control_value_use_duration]
                    ui set duration.text [format_duration [control get $control_value_duration]]
                    set duration_visible 1
                } else {
                    ui set check_duration.index 0
                    set duration_visible 0
                }
                ui set check_duration.visible $duration_visible
                ui set label_duration.visible $duration_visible
                ui set unit_duration.visible $duration_visible
                ui set box_duration.visible $duration_visible
                ui set duration.visible $duration_visible
                ui set duration_up.visible $duration_visible
                ui set duration_down.visible $duration_visible
                ui set check_daily.visible $daily_visible
                ui set label_daily.visible $daily_visible
                UpdateDateVisibility
            }
        }
        
        proc UpdateDateVisibility {} {
                variable control_value_duration
                variable control_value_use_duration
                set date_visible [expr ![ui get check_daily.index]]
                ui set label_date.visible $date_visible
                ui set box_date.visible $date_visible
                ui set date.visible $date_visible
                ui set date_up.visible $date_visible
                ui set date_down.visible $date_visible
                ui set check_duration.visible [expr $date_visible && [string length $control_value_use_duration] && [string length $control_value_duration] ]
        }

        proc ResetControls {} {
            variable control_value_time ""
            variable control_value_duration ""
            variable control_value_use_duration ""
            variable control_value_daily ""
            
            ui set title.text "Timer"
            ui set subtitle.text ""
        }
        
        proc format_time { time } {
            if { !$time } { return "" }
            return [clock format $time -gmt true -format "%H:%M"]
        }
        
        proc format_date { time } {
            if { !$time } { return "" }
            return [clock format $time -gmt true -format "%d.%m.%Y"]
        }
        
        proc scan_time { date_string time_string } {
            set date_components [split $date_string .]
            if { ([llength $date_components] < 3) || ( "$time_string" == "" ) } {
                return 0
            }
            set date "[lindex $date_components 1]/[lindex $date_components 0]/[lindex $date_components 2]"
            return [clock scan "$date $time_string" -gmt true]
        }
        
        proc scan_duration { time_string } {
            set components [split $time_string :]
            set seconds [expr [lindex $components 0] * 3600 + [lindex $components 1] * 60]
            return $seconds
        }
        
        proc format_duration { seconds } {
            if { $seconds > 99 * 3600 + 59 * 60 } {
                return "99:59"
            }
            if { $seconds < 0 } {
                return "00:00"
            }
            return [format "%02d:%02d" [expr $seconds / 3600] [expr ( $seconds / 60 ) % 60]]
        }
        
        proc get_local_now_seconds {} {
            set seconds [clock seconds]
            set time_string [clock format $seconds -format "%m/%d/%Y %H:%M:%S"]
            return [clock scan $time_string -gmt true]
            
        }
        
        proc OnNowClick { control } {
            set seconds [get_local_now_seconds]
            ui set date.text [format_date $seconds]
            ui set time.text [format_time $seconds]
        }
        
        proc OnTimeClick { control } {
            variable numpad_control
            set numpad_control [string range $control 4 end]
            set numpad::pattern "##:##"
            set numpad::regex {(([01][0-9])|(2[0-3])):[0-5][0-9]}
            set time [ui get ${numpad_control}.text]
            if { "$time" == "" } { set time [clock format [clock seconds] -format "%H:%M"] } 
            set numpad::value $time
            ui set numpad.title.text [ui get title.text]
            ui set numpad.subtitle.text "Startzeit"
            ui load numpad
        }
        
        proc step_time { offset } {
            set seconds [scan_time [ui get date.text] [ui get time.text]]
            if { $seconds == 0 } {
                set seconds get_local_now_seconds
            } else {
                incr seconds $offset
            }
            ui set date.text [format_date $seconds]
            ui set time.text [format_time $seconds]
        }
        
        proc OnTimeStepClick { control } {
            set offset 60
            if { [string first up $control] >= 0 } {
                step_time $offset
            } else {
                step_time -$offset
            }
        }

        proc OnDateClick { control } {
            if { ![ui get ${control}.visible] } return
            
            variable numpad_control
            set numpad_control [string range $control 4 end]
            set numpad::pattern "##.##.20##"
            set numpad::regex {((([012][0-9])|(3[0-1]))\.((0[13578])|(1[02])))|((([012][0-9])|(30))\.((0[469])|(11)))|(([012][0-9])\.(02)).20[0-9][0-9]}
            set date [ui get ${numpad_control}.text]
            if { "$date" == "" } { set date [clock format [clock seconds] -format "%d.%m.%Y"] } 
            set numpad::value $date
            ui set numpad.title.text [ui get title.text]
            ui set numpad.subtitle.text "Startdatum"
            ui load numpad
        }

        proc OnDateStepClick { control } {
            if { ![ui get ${control}.visible] } return
            
            if { [string first up $control] >= 0 } {
                step_time 86400
            } else {
                step_time -86400
            }
        }

        proc OnDurationClick { control } {
            variable numpad_control
            set numpad_control [string range $control 4 end]
            set numpad::pattern "##:##"
            set numpad::regex {[0-9][0-9]:[0-5][0-9]}
            set time [ui get ${numpad_control}.text]
            if { "$time" == "" } { set time "00:00" } 
            set numpad::value $time
            ui set numpad.title.text [ui get title.text]
            ui set numpad.subtitle.text "Timer aus nach"
            ui load numpad
        }
        
        proc OnDurationStepClick { control } {
            set offset 60
            set seconds [scan_duration [ui get duration.text]]
            if { [string first up $control] >= 0 } {
                incr seconds $offset
            } else {
                incr seconds -$offset
            }
            ui set duration.text [format_duration $seconds]
        }

        proc OnCheckDurationClick { control } {
            if { ![ui get ${control}.visible] } return
            ui set ${control}.index [expr ![ui get ${control}.index]]
            ui set check_daily.index 0
            UpdateDateVisibility
        }
        
        proc OnCheckDailyClick { control } {
            if { ![ui get ${control}.visible] } return
            ui set ${control}.index [expr ![ui get ${control}.index]]
            ui set check_duration.index [ui get ${control}.index]
            UpdateDateVisibility
        }
        
        proc OnOkClick { control } {
            variable control_value_time 
            variable control_value_duration 
            variable control_value_use_duration 
            variable control_value_daily 
            
            set seconds [scan_time [ui get date.text] [ui get time.text]]
            control set $control_value_time $seconds

            if { [ui get duration.visible] } {
                set seconds [scan_duration [ui get duration.text]]
                control set $control_value_duration $seconds
            }
            if { [ui get check_duration.visible] || [ui get check_daily.index]} {
                control set $control_value_use_duration [ui get check_duration.index]
            }
            if { [ui get check_daily.visible] } {
                set daily [ui get check_daily.index]
                control set $control_value_daily $daily
            }
            ResetControls
            ui back
        }
        
        proc OnCancelClick { control } {
            ResetControls
            ui back
        }
        
    ]]></code>
  </page>
</ui>
