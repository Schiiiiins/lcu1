#pragma once
#include <TimerTarget.h>
#include <time.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Class for controlling the TFT backlight.  </summary>
///
/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class UiBacklight: TimerTarget
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constants.  </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum {
		/// <summary> Interval for dimming the backlight slowly donw  </summary>
		DimmInterval = 50,
		/// <summary> Steps for dimming the backlight slowly donw  </summary>
		DimmStep = 10,
		/// <summary> Timer cookie for the backlight timer.  </summary>
		TimerSwitchOff = 0,
		/// <summary> Timer cookie for the backlight dimming timer.  </summary>
		TimerDimmDown = 1
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	UiBacklight(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Finaliser. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~UiBacklight(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Triggers the timer. Should be called for every detected touch screen interaction. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool Trigger();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Returns the minimum and maximum brightness. </summary>
	///
	/// <remarks>	Lars Reemts, 23.05.2011. </remarks>
	///
	/// <param name="minBrightness">	[out] The minimum brightness. </param>
	/// <param name="maxBrightness">	[out] The maximum brightness. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void GetRange( int* minBrightness, int* maxBrightness );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the minimum and maximum brightness. </summary>
	///
	/// <remarks>	Lars Reemts, 23.05.2011. </remarks>
	///
	/// <param name="minBrightness">	The minimum brightness. </param>
	/// <param name="maxBrightness">	The maximum brightness. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRange( int minBrightness, int maxBrightness );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the timeout in seconds before the display is dimmed. 0 stands for no dimming. </summary>
	///
	/// <remarks>	Lars Reemts, 23.05.2011. </remarks>
	///
	/// <returns>	The timeout. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int GetTimeout();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Sets the timeout in seconds before the display is dimmed. 0 stands for no dimming.
	/// </summary>
	///
	/// <remarks>	Lars Reemts, 23.05.2011. </remarks>
	///
	/// <param name="timeout">	The timeout. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTimeout( int timeout );
private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="TimerTarget::OnTimer" />.
	/// 			Called when the backlight timeout expires to switch off the backlight. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="cookie">	The timer cookie. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void OnTimer( unsigned long cookie );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Switches the backlight on or off. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="on">	true for on, false for off. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Switch( bool on );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the brightness. </summary>
	///
	/// <remarks>	Lars Reemts, 11.05.2011. </remarks>
	///
	/// <param name="brightness">	The brightness. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetBrightness( int brightness );

	/// <summary> true if backloght is on, false if backlight is off. </summary>
	bool _isOn;
	/// <summary> current analog brightness, 0-255 </summary>
    int _currentBrightness;
	/// <summary> maximum brightness, 0-255 </summary>
    int _maxBrightness;
	/// <summary> minimum brightness, 0-255 </summary>
    int _minBrightness;
	/// <summary> Timeout in seconds after the last touch screen action for switching off the backlight.  </summary>
    int _backlightTimeout;
    /// <summary> Timestamp of the last trigger event</summary>
    time_t _lastTriggerTime;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// End of UiBacklight.h
////////////////////////////////////////////////////////////////////////////////////////////////////

