#pragma once
#include "UiElement.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	User interface text element.  </summary>
///
/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class UiText: public UiElement
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	UiText(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Finaliser. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~UiText(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="UiElement::InitfromXml" />.
	/// 			Initializes this object from an XML description. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="rootNode">	[in] The XML node containing the description for this object. </param>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool InitFromXml( XMLNode& rootNode );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="UiElement::Render" />. Renders this object on 
	/// 			the directFB surface. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Render();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the text. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <returns>	The text. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	const std::string& GetText();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the text. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="text">	The text. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetText(const std::string& text);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="UiElement::SetProperty" />. Called from the TCL 
	/// 			<c>ui set</c> command. 
	/// 			Supported properties (in addition to the <c>UiElement</c> properties:
	/// 			- <c>string text</c>: Text to display.
	/// 			- <c>int color</c>: Color of the text as RGB value.
	/// 			</summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="id">   	The property identifier. </param>
	/// <param name="value">	The property value. </param>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool SetProperty( const std::string& id, const std::string& value );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="UiElement::GetProperty" />.
	/// 			<see cref="SetProperty" /> for a list of properties. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="id">   	The identifier. </param>
	/// <param name="value">	[out] The value. </param>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool GetProperty( const std::string& id, std::string* value );

protected:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Checks if the given coordinates belong to this UI element. </summary>
	///
	/// <remarks>	Lars Reemts, 04.05.2011. </remarks>
	///
	/// <param name="x">	The x coordinate. </param>
	/// <param name="y">	The y coordinate. </param>
	///
	/// <returns>	true if the test passes, false if the test fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool HitTest( int x, int y );

private:
	/// <summary> The font used to render the text</summary>
	IDirectFBFont* _font;
	/// <summary> The text </summary>
	std::string _text;
	/// <summary> The red color component </summary>
	unsigned char _r;
	/// <summary> The green color component </summary>
	unsigned char _g;
	/// <summary> The blue color component </summary>
	unsigned char _b;
	/// <summary> true if the text is to be centered </summary>
	bool _center;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// End of UiText.h
////////////////////////////////////////////////////////////////////////////////////////////////////

