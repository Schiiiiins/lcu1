#pragma once
#include "UiElement.h"
#include "TimerTarget.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	User interface element for displaying date and time.  </summary>
///
/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class UiDateTime: public UiElement, TimerTarget
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	UiDateTime(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Finaliser. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~UiDateTime(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="UiElement::InitfromXml" />.
	/// 			Initializes this object from an XML description. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="rootNode">	[in] The XML node containing the description for this object. </param>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool InitFromXml( XMLNode& rootNode );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="UiElement::Render" />. Renders this object on 
	/// 			the directFB surface. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Render();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the date time format string. String must be in the format understood by
	/// 			<c>strftime()</c>. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <returns>	The date time format string. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	const std::string& GetFormat();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the date time format string. String is in the format understood by
	/// 			<c>strftime()</c>. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="text">	The date time format string. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetFormat(const std::string& text);
protected:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Implementation of <see cref="TimerTarget::OnTimer" />.
	/// 			Called periodically to re-render the time. </summary>
	///
	/// <remarks>	Lars Reemts, 03.05.2011. </remarks>
	///
	/// <param name="cookie">	The cookie. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void OnTimer(unsigned long cookie);
private:
	/// <summary> The font used for drawing</summary>
	IDirectFBFont* _font;
	/// <summary> The <c>strftime()</c> format to use for rendering </summary>
	std::string _format;
	/// <summary> The red color component </summary>
	unsigned char _r;
	/// <summary> The green color component </summary>
	unsigned char _g;
	/// <summary> The blue color component </summary>
	unsigned char _b;
	/// <summary> true if the textual time representation is to be centered </summary>
	bool _center;
	/// <summary> The UI update interval in seconds </summary>
	int _resolution;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// End of UiDateTime.h
////////////////////////////////////////////////////////////////////////////////////////////////////

