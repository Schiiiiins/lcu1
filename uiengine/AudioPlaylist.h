#pragma once

#include <vector>
#include <string>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Playlist for the audio player. Holds a list of audio files with optional information
/// 			on which part of the file to play. </summary>
///
/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class AudioPlaylist
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	AudioPlaylist(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Finaliser. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~AudioPlaylist(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clears the playlist. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Clear();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the repetition flag. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <param name="repeat">	true to repeat. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRepetition( bool repeat );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Adds an audio file to the playlist. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <param name="filename">		 	Filename of the audio file. Absolute path or path relative to 
	/// 								UI manager's description directory</param>
	/// <param name="skipMillis">	 	Number of milliseconds to skip at the start of the audio file. </param>
	/// <param name="durationMillis">	Duration of the audio to play from the file. Use <c>0</c> for 
	/// 								the complete file. </param>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool Add( const char* filename, int skipMillis, int durationMillis );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the filename of the current playlist entry. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	The current filename. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	const std::string& GetCurrentFilename();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the number of milliseconds to skip at the beginning of the 
	/// 			current playlist entry. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	The skip time in milliseconds. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int GetCurrentSkipMillis();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the play length in milliseconds of the current playlist entry. <c>0</c> stands 
	/// 			for the whole file.</summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	Duration in milliseconds. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int GetCurrentDurationMillis();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Advance the playlist to the next entry. If the repeat flag is set and we are at 
	/// 			the end of the playlist, start over at the first entry.</summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	true if the next entry is valid, false if we are at the end of the playlist. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool Next();
private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Playlist entry.  </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct PlaylistEntry
	{
		PlaylistEntry( const char* filename, int skipMillis, int durationMillis )
		{
			Filename = filename;
			SkipMillis = skipMillis;
			DurationMillis = durationMillis;
		}
		std::string Filename;
		int SkipMillis;
		int DurationMillis;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Typedef for the playlist vector. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	typedef std::vector<PlaylistEntry> t_playlist;
	/// <summary> The playlist </summary>
	t_playlist _playlist;
	/// <summary> true if the playlist is repeated cyclically </summary>
	bool _repeat;
	/// <summary> The index of the current entry </summary>
	unsigned int _curIndex;
	/// <summary> The index of the next entry </summary>
	unsigned int _nextIndex;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// End of AudioPlaylist.h
////////////////////////////////////////////////////////////////////////////////////////////////////

