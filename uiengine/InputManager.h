#pragma once
#include <directfb.h>

class UiManager;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Manager for directFB touchscreen input events.  </summary>
///
/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class InputManager
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <param name="uiManager">	[in] Associated UI manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	InputManager(UiManager* uiManager);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Finaliser. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~InputManager(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Handle an input event. Must be called for each received directFB event.</summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <param name="evt">	[in] The event. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void HandleInputEvent( DFBInputEvent& evt );
private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Flag constants for tracking the internal state of a touch event.  </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum{
		/// <summary> The pen (or finger) is on the touch.  </summary>
		FlagPendown = 1,
		/// <summary> X position has been received.  </summary>
		FlagXreceived = 2,
		/// <summary> Y position has been received.  </summary>
		FlagYreceived = 4,
		/// <summary> The pen is down but at least one position (X or Y) has not yet been received.  </summary>
		FlagPendownPending = 8
	};
	/// <summary> The pen x coordinate </summary>
	int _penX;
	/// <summary> The pen y coordinate </summary>
	int _penY;
	/// <summary> The flags </summary>
	int _flags;
	/// <summary> Manager for user interface </summary>
	UiManager* _uiManager;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// End of InputManager.h
////////////////////////////////////////////////////////////////////////////////////////////////////

