#pragma once

#include "AlsaMixer.h"
#include "AudioPlaylist.h"
#include "AudioPlayer.h"

class UiManager;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Class for managing audio related functionality.  </summary>
///
/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class AudioManager
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <param name="uiManager">	[in] Associated user interface manager. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	AudioManager( UiManager* uiManager );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Finaliser. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~AudioManager(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Initialises this object. 
	/// 			Needs to be called before calling any other function. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool Init();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the associated mixer object. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	The mixer. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	AlsaMixer* GetMixer();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Clears the playlist. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ClearPlaylist();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a playlist repetition. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <param name="repeat">	true to repeat. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetPlaylistRepetition( bool repeat );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Adds a single audio file to the playlist.  </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <param name="filename">		 	Filename of the audio file. Absolute path or path relative to 
	/// 								UI manager's description directory</param>
	/// <param name="skipMillis">	 	Number of milliseconds to skip at the start of the audio file. </param>
	/// <param name="durationMillis">	Duration of the audio to play from the file. Use <c>0</c> for 
	/// 								the complete file. </param>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool AddToPlaylist( const char* filename, int skipMillis, int durationMillis );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Should be called if the associated file descriptor (<see cref="GetFd" />)
	/// 			becomes readable. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void DoPendingWork();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	<see cref="AudioPlayer::GetFd" /> </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	The audio player stdout fd. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int GetFd();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Query if this object is initialized. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	true if initialized, false if not. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool IsInitialized();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the associated user interface manager. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	The user interface manager. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	UiManager* GetUiManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets a map containing information on the currently played file.
	/// 			<see cref="AudioPlayer::GetInfo" />. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	The current audio file information. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::map<std::string, std::string> GetInfo();
private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Starts madplay as a background player process. </summary>
	///
	/// <remarks>	Lars Reemts, 02.05.2011. </remarks>
	///
	/// <returns>	true if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool StartPlayerProcess();
	/// <summary> The sound card name </summary>
	std::string _card;
	/// <summary> The mixer object </summary>
	AlsaMixer _mixer;
	/// <summary> The playlist </summary>
	AudioPlaylist _playlist;
	/// <summary> The player object </summary>
	AudioPlayer _player;
	/// <summary> The user interface manager </summary>
	UiManager* _uiManager;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// End of AudioManager.h
////////////////////////////////////////////////////////////////////////////////////////////////////

