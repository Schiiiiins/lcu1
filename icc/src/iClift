#!/usr/bin/perl
########################################################################
##
##	iClift
##	simulation of the physics and appearance of lifts in a building
##
########################################################################
use Tk;
use strict;
use warnings;

########################################################################
#
#	Initialization
#
########################################################################

my $named = $0; $named =~ s#.*[/\\]##;
use vars qw($opt_c $opt_d $opt_W $opt_H $opt_t $opt_m $opt_T $opt_h);
format STDERR =
Usage:
@<<<<<< [-tmTh][ -c cage_delay][ -d door_type][ -W width][ -H height]
	$named
	-c del	delay between cage steps (default @<<< ms)
						$opt_c
	-d typ	door type 0 open from centre, 1 left, -1 right
	-W pix	width of canvas in pixels  (default @<<<)
						$opt_W
	-H pix	height of canvas in pixels (default @<<<)
						$opt_H
	-t	trace debug messages
	-m	display elapsed time in seconds and microseconds
	-T	extra static debug messages
	-h	help, ouput this Usage text only
Copyright (C) 2000-2008  John E. Wulff		<ic@je-wulff.de>
							  '@'
$Id: iClift,v 1.5 2008/06/25 21:41:30 jw Exp $ uses Tk-@<<<<<<<<<
							$Tk::VERSION
.

require "getopts.pl";
&Getopts('c:d:W:H:tmTh');	# sets $opt_h if -h etc

$opt_c = 7 unless defined $opt_c;	# delay between cage steps
$opt_d = 0 unless defined $opt_d;	# door type 0 open from centre, 1 left, -1 right
$opt_W = 400 unless defined $opt_W;	# width of canvas in pixels
$opt_H = 850 unless defined $opt_H;	# height of canvas in pixels
my $to = 2;			# triangle offset in square buttons

if ($opt_h) {
    write STDERR; exit 0;	# -h, ouput Usage only
}

my ($t0, $t1, $sec, $usec);
if ($opt_m) {
    use Time::HiRes qw(gettimeofday);
    $t0 = [gettimeofday];	# start of program
}

my $thickness = 1;
my $ropeThickness = 3;
my $cageD = $opt_c;

my $mw = MainWindow->new;
$mw->title('Lift Model');

my $f = $mw->Frame(-relief   => 'groove',
		-bd     => 2,
	       )->pack(
		-side => 'left',
		-fill => 'y'
	       );

my $c = $mw->Scrolled('Canvas',
		-cursor => 'left_ptr',
		-width  => $opt_W,
		-height => $opt_H,
	       )->pack(
		-side => 'left',
		-fill => 'both',
		-expand => 1,
	       );
my $canvas = $c->Subwidget('canvas');

my $cageId;
my $cage = draw_cage($canvas, 165, $opt_H - 215, 110, 145);
my $door = draw_door($canvas, 165, $opt_H - 217,  55, 137, 2, $opt_d);
my $wall_3 = draw_wall($canvas, 165, $opt_H - 215, 300, 200, 100, 133);
my $wall_2 = draw_wall($canvas, 165, $opt_H - 420, 300, 200, 100, 133);
my $wall_1 = draw_wall($canvas, 165, $opt_H - 625, 300, 200, 100, 133);
my $wall_0 = draw_wall($canvas, 165, $opt_H - 830, 300, 200, 100, 133);
# my ($canv, $actualWall, $upBut, $upTri, $downTri, $downBut, $upInd, $downInd, $floorInd) = @$wall;

$mw->bind('<Key-Up>',	  [ \&move_cage, $cage, 1      ]);	# cage up
$mw->bind('<Key-Down>',	  [ \&move_cage, $cage, -1     ]);	# cage down
$mw->bind('<Key-Prior>',  [ \&move_cage, $cage, 5      ]);	# cage up fast
$mw->bind('<Key-Next>',	  [ \&move_cage, $cage, -5     ]);	# cage down fast
$mw->bind('<Key-Home>',	  [ \&move_cage, $cage, 1,  $cageD, \$cageId ]);	# cage up continuous
$mw->bind('<Key-End>',	  [ \&move_cage, $cage, -1, $cageD, \$cageId ]);	# cage down continuous
$mw->bind('<Key-Return>', [ \&move_cage, $cage, 0, 0,   \$cageId ]);	# stop cage continuous
$mw->bind('<Key-Right>',  [ \&move_door, $door, 1  ]);	# open doors
$mw->bind('<Key-Left>',	  [ \&move_door, $door, -1 ]);	# close doors
$mw->bind('<Key-q>',	  sub { exit(0); });	# quit

MainLoop;

########################################################################
#
#	Draw a wall with an opening for a lift door
#	This widget sits in front of lift cage and lift doors and wall doors
#	parameter 1:	canv	canvas this wall is drawn on
#	parameter 2,3:	x,y	coordinates of bottom (floor) centre
#	parameter 4,5:	w,h	width and height of wall
#	parameter 6,7:	wd,hd	width and height of door opening
#
#	Note: all parameter y coordinates are reversed like engineering drawings
#
########################################################################

sub draw_wall {
    my ($canv, $x, $y, $width, $height, $wDoor, $hDoor) = @_;
    print "start_drawing:	x,y = '$x,$y'\t" if $opt_T;
    $x = $canv->canvasx($x);
    $y = $canv->canvasy($opt_H - $y);
    print "lift_wall: x,y = '$x,$y' w = '$width' h = '$height' wd = '$wDoor' hd = '$hDoor'\n" if $opt_T;

    my $width_2    = $width * 0.5;
    my $wDoor_2    = $wDoor * 0.5;

    my $xLeft      = $x - $width_2;
    my $xRight     = $x + $width_2;
    my $yTop       = $y - $height;
    my $yBott      = $y;
    my $xDoorLeft  = $x - $wDoor_2;
    my $xDoorRight = $x + $wDoor_2;
    my $yDoorTop   = $y - $hDoor;

    my $actualWall = $canv->createPolygon (
	$xLeft,		$yTop,		# 0
	$xRight,	$yTop,		# 1
	$xRight,	$yBott,		# 2
	$xDoorRight,	$yBott,		# 3
	$xDoorRight,	$yDoorTop,	# 4
	$xDoorLeft,	$yDoorTop,	# 5
	$xDoorLeft,	$yBott,		# 6
	$xLeft,		$yBott,		# 7
	-width => $thickness,
	-tags => 'wall',
	-fill => 'cornsilk1',
	-outline => 'black',
    );

    my $xBut = $xDoorRight + $wDoor * 0.1;	# x button position to right of centre
    my $yBut = $yBott - $hDoor * 0.4;	# y button position from the floor
    my $yOff = $hDoor * 0.07;		# vert space between buttons / 2
    my $rBut = $wDoor * 0.05;		# radius of buttons

    my $xtl = $xBut - $rBut;
    my $xbr = $xBut + $rBut;
    my $ytl = $yBut - $yOff - $rBut;
    my $ybr = $yBut - $yOff + $rBut;

    my $upBut = $canv->create (
	'rectangle',			# can be parameterized to be a circle
	$xtl, $ytl,
	$xbr, $ybr,
	-width => $thickness,
	-tags => 'but',
	-fill => 'green',
	-outline => 'black',
    );

    my $xpl = $xtl + $to;
    my $xpr = $xbr - $to;
    my $xpm = ($xtl + $xbr) / 2;
    my $ypt = $ytl + $to;
    my $ypb = $ybr - $to;

    my $upTri = $canv->create (
	'polygon',
	$xpl, $ypb,
	$xpr, $ypb,
	$xpm, $ypt,
	-width => $thickness,
	-tags => 'but',
	-fill => 'black',
	-outline => 'black',
    );

    $ytl = $yBut + $yOff - $rBut;
    $ybr = $yBut + $yOff + $rBut;

    my $downBut = $canv->create (
	'rectangle',			# can be parameterized to be a circle
	$xtl, $ytl,
	$xbr, $ybr,
	-width => $thickness,
	-tags => 'but',
	-fill => 'green',
	-outline => 'black',
    );

    $ypt = $ytl + $to;
    $ypb = $ybr - $to;

    my $downTri = $canv->create (
	'polygon',
	$xpl, $ypt,
	$xpr, $ypt,
	$xpm, $ypb,
	-tags => 'but',
	-fill => 'black',
	-outline => 'black',
    );
    
    my ($upInd, $downInd, $floorInd);

    $canv->bind($upBut, '<Button-1>', [ \&wallButton, $canv, $upBut, 'green', $upTri, 'black', ]);
    $canv->bind($upTri, '<Button-1>', [ \&wallButton, $canv, $upBut, 'dark green', $upTri, 'yellow', ]);
    $canv->bind($downBut, '<Button-1>', [ \&wallButton, $canv, $downBut, 'green', $downTri, 'black', ]);
    $canv->bind($downTri, '<Button-1>', [ \&wallButton, $canv, $downBut, 'dark green', $downTri, 'yellow', ]);

    return [ $canv, $actualWall, $upBut, $upTri, $downTri, $downBut, $upInd, $downInd, $floorInd, ];
} # draw_wall

########################################################################
#
#	Process a wall button (up or down)
#	(call to controller)
#	Leave the output on until it is reset from the controller
#	when the indication is also turned on. Or make it a
#	short transient whose leading edge is significant. 2nd option
#	may loose a pulse if OS has a hiccup.
#
########################################################################

sub wallButton {
    my ($dummy, $canv, $button, $butColour, $triangle, $triColour) = @_;
    $canv->itemconfigure($button, -fill => $butColour);
    $canv->itemconfigure($triangle, -fill => $triColour);
    $canv->itemconfigure($triangle, -outline => $triColour);
}

########################################################################
#
#	Indicate a wall button state (off or on)
#	(called from the controller)
#
########################################################################

sub setWallButton {
    my ($dummy, $canv, $button, $butColour, $triangle, $triColour) = @_;
    $canv->itemconfigure($button, -fill => $butColour);
    $canv->itemconfigure($triangle, -fill => $triColour);
    $canv->itemconfigure($triangle, -outline => $triColour);
}

########################################################################
#
#	Draw a set of lift doors to close the opening in the wall
#	parameter 1:	canv	canvas this door is drawn on
#	parameter 2,3:	x,y	coordinates of bottom (floor) centre
#	parameter 4,5:	w,h	width and height of one door
#	parameter 6:	offset	initial offset (leaves a small opening for type 0)
#	parameter 7:	type	0	2 door which move left and right
#				1	2 doors which move left at different speeds
#				-1	2 doors which move right at different speeds
#
########################################################################

sub draw_door {
    my ($canv, $x, $y, $width, $height, $offset, $type) = @_;
    print "start_drawing:	x,y = '$x,$y'\t" if $opt_T;
    $x = $canv->canvasx($x);
    $y = $canv->canvasy($opt_H - $y);
    print "lift_door: x,y = '$x,$y' w = '$width' h = '$height' o = '$offset' t = '$type'\n" if $opt_T;

    my ($backInc, $frontInc, $off);
    if ($type == 1) {
	$backInc      = 1;
	$frontInc     = 2;
	$off          = -$offset;	# -ve offset for overlapping doors
    }
    elsif ($type == -1) {
	$backInc      = -1;
	$frontInc     = -2;
	$off          = -$offset;	# -ve offset for overlapping doors
    }
    else {
	$backInc      = -1;
	$frontInc     = 1;
	$off          = $offset;
    }
    my $xMiddleBack   = $x - $backInc  * $off;
    my $xOutsideBack  = $xMiddleBack  - $backInc * $width;
    my $xMiddleFront  = $x + $backInc * $off;
    my $xOutsideFront = $xMiddleFront + $backInc * $width;
    my $yTop          = $y - $height;
    my $yBott         = $y;

    # draw backDoor first so it is at back if overlapped
    my $backDoor = $canv->createRectangle (
	$xOutsideBack, $yTop,
	$xMiddleBack,  $yBott,
	-width => $thickness,
	-tags => 'door',
	-fill => 'light green',
	-outline => 'black',
    );

    # draw frontDoor later so it is in front if overlapped
    my $frontDoor = $canv->createRectangle (
	$xOutsideFront, $yTop,
	$xMiddleFront,  $yBott,
	-width => $thickness,
	-tags => 'door',
	-fill => 'light blue',
	-outline => 'black',
    );
    return [ $canv, $backDoor, $frontDoor, $backInc, $frontInc, ];	# used in move_door()
} # draw_door

########################################################################
#
#	Move door open or closed
#	Parameter 1:	dummy
#	Parameter 2:	dor	door identification array ref
#	Parameter 3:	inc	1..n	number of increments to open
#				-1..-n	number of increments to close
#
########################################################################

sub move_door {
    my ($dummy, $dor, $inc) = @_;
    my ($canv, $backDoor, $frontDoor, $backInc, $frontInc) = @$dor;
    printMicroSeconds();
    print "door increment = '$inc'\n" if $opt_t;
    $canv->move($backDoor,  $backInc  * $inc, 0);
    $canv->move($frontDoor, $frontInc * $inc, 0);
} # move_door

########################################################################
#
#	Draw a lift cage
#
########################################################################

sub draw_cage {
    my ($canv, $x, $y, $width, $height) = @_;
    print "start_drawing:	x,y = '$x,$y'\t" if $opt_T;
    $x = $canv->canvasx($x);
    $y = $canv->canvasy($opt_H - $y);
    print "lift_cage: x,y = '$x,$y' w = '$width'\n" if $opt_T;

    my $width_2    = $width * 0.5;
    my $xLeft      = $x - $width_2;
    my $xRight     = $x + $width_2;
    my $yTop       = $y - $height;
    my $yBott      = $y;

    my @coordinates = (
	$xLeft,		$yTop,	# 0
	$xRight,	$yBott,	# 1
    );

    my $basicCage = $canv->createRectangle (
	@coordinates,
	-width => $thickness,
	-tags => 'cage',
	-fill => 'yellow',
	-outline => 'black',
    );

    my $rope = $canv->createLine (
	$x, 0,
	$x, $yTop,
	-width => $ropeThickness,
	-tags => 'rope',
	-fill => 'blue',
    );
    return [ $canv, $basicCage, $rope, $x, $yTop, ];	# used in move_cage()
} # draw_cage

########################################################################
#
#	Move cage up or down
#	Parameter 1:	dummy
#	Parameter 2:	cag	cage identification array ref
#	Parameter 3:	inc	1..n	number of increments to move up
#				-1..-n	number of increments to move down
#	Parameter 4:	tim	undef	move once
#				1..n	number of milliseconds between
#					steps of continuous motion
#				0	stop continous motion
#	Parameter 5:	idRef	reference to id returned by after or repeat
#
########################################################################

no warnings;
sub move_cage {
    my ($dummy, $cag, $inc, $tim, $idR) = @_;
    my ($canv, $basicCage, $rope, $x, $yTop) = @$cag;	# $yTop at index 4
    printMicroSeconds();
    if (defined $tim) {
	if ($$idR) {
	    $$idR->cancel();	# stop continuous cage movement
	    $$idR = undef;
	}
	elsif ($tim) {
	    $$idR = $canv->repeat($tim, [ \&move_cage, $dummy, $cag, $inc, ]); # no time
	}
	print "cage time = '$tim' id = '$$idR'\n" if $opt_t;
    } else {
	print "cage increment = '$inc'\n" if $opt_t;
	if ($inc) {
	    $canv->move($basicCage, 0, -$inc);
	    $yTop -= $inc;
	    $$cag[4] = $yTop;
	    $canv->coords($rope, $x, 0, $x, $yTop);	# move bottom of rope to stay attached to cage
	}
    }
} # move_cage
use warnings;

########################################################################
#
#	Compute and print elapsed microseconds
#
########################################################################

sub printMicroSeconds {
    if ($opt_m) {
	my ($sec, $usec);
	$t1 = [gettimeofday];
	$sec =  $t1->[0] - $t0->[0];
	$usec = $t1->[1] - $t0->[1];
	if ($usec < 0) {
	    $sec--;
	    $usec += 1000000;
	}
	if ($opt_t) {
	    printf "L%3d.%03d,%03d: ", $sec, int($usec/1000), $usec%1000;
	} else {
	    printf "L%3d.%03d,%03d\n", $sec, int($usec/1000), $usec%1000;
	}
	$t0 = $t1;
    } elsif ($opt_t) {
	print "L: ";
    }
}
__END__

############ POD to generate man page ##################################

=head1 NAME

 iClift -simulation of the physics and appearance of lifts in a building

=head1 SYNOPSIS

 iClift [-tmTh][ -c cage_delay][ -d door_type][ -W width][ -H height]
	-L num  number of lifts in the building      (default 1)
	-F code floor code for basement,ground,upper (default 'B1,G,3')
	-c del	delay between cage steps             (default 7 ms)
	-d typ	door type 0 open from centre, 1 left, -1 right
	-W pix	width of canvas in pixels            (default 370)
	-H pix	height of canvas in pixels           (default 644)
	-t	trace debug messages
	-m	display elapsed time in seconds and microseconds
	-T	extra static debug messages
	-h	help, ouput this Usage text only

=head1 DESCRIPTION

B<iClift> provides an interface to a suitable iC control application
meant to control the working of one or more lifts in a building and
all associated devices. The outputs from the control application must
drive the various motors to open doors, raise and lower the lifts and
turn indicators on and off. Inputs to the control application come from
the pushbuttons on the floors, pushbuttons to select destination floors
in the lift and position sensors, indicating the position of the lifts.

The simulation shows an animated picture of the floors with suitable
pushbuttons and indicators, outside and inside doors, which can be
opened and closed, as well as lifts which can be moved at different
speeds. In particular the lifts do not start and stop instantaneously,
but rather with an acceleration and deceleration to simulate the
inertia of the lifts.

The number of lifts can be preset with the -L option. This must be
matched by an equal number of lifts to be controlled by the control
application. The same applies to the floors which are preset with
the -F option. This option also determines the prefixes used for
basement floors and the text used for the ground floor.  Ground floor
can also be 0 or 1. Basement prefixes can vary. A prefix for upper
floors could be provided, but is not usual.

    -F B3,G,3  would provide the following floors:   B3 B2 B1 G 1 2 3
    -F B3,1,4  for american indications:             B3 B2 B1 1 2 3 4
    -F U3,E,3  for german indications:               U3 U2 U1 E 1 2 3
    -F S3,P,3  for french indications:               S3 S2 S1 P 1 2 3
    -F -3,0,3  for equivalent numerical indications: -3 -2 -1 0 1 2 3

Outputs from the control application:

 Common to all floors:
    Floor indicator:    QB1	# floor at which lift is currently
    Lift up:            QX0.0
    Lift slow:          QX0.1
    Lift medium:        QX0.2
    Lift fast:          QX0.3	# this may vary
 or Lift speed:         QB2     # +/-

 Equivalences for Buttons in the lift:
 (order determines position starting at the top)
 [LIFT BUTTONS]
    5    X1.5,  6    X1.6,	# actuators and indicators
    3    X1.3,  4    X1.4,
    1    X1.1,  2    X1.2,
    B1   X0.7,  G    X1.0,
    B3   X0.5,  B2   X0.6,
    do   IX0.0, dc   IX0.1,     # door open and close, actuators only
 (the same list can be used in the control application)
 
 [FLOOR BUTTONS]
    6    X4.4,  X4.5,		# up/down actuators and indicators
    5    X4.2,  X4.3,
    4    X4.0,  X4.1,
    3    X3.6,  X3.7,
    2    X3.4,  X3.5,
    1    X3.2,  X3.3,
    G    X3.0,  X3.1,
    B1   X2.6,  X2.7,
    B2   X2.4,  X2.5,
    B3   X2.2.  X2.3,

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<ic@je-wulff.de> with L<iC Project> in the
subject field.

=head1 SEE ALSO

L<iCbox(1)>, L<immcc(1)>, L<iClive(1)>, L<iCserver(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2008  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.
