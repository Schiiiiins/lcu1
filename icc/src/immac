#!/usr/bin/perl

#################################################################
#
#	Copyright (C) 2000-2008  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file or <ic@je-wulff.de>
#
#	immac
#
#   Pre-compiler to convert "immediate C" source files containing arrays
#   int straight "immediate C".
#
#################################################################

use strict;
use integer;			# allows QX[n/8].[n%8]

my $named = $0;
$named =~ s#.*[/\\]##;		# delete directory names in path
format STDERR =
Usage:
 @<<<<<<< [-ath][ -o<out>][ -l<log>][ -e<err>][ -Pmacro[=defn]...] <src.ica>
	$named
    -o <out>   name of generated iC output file (default: stdout)
    -l <log>   name of Perl log file            (default: none)
    -e <err>   name of error file               (default: stderr)
    -P <macro> predefine <macro> evaluated directly by this program
               Usually defined with a numeric value eg. -P m=8
               NOTE: command line definitions have precedence over
		     '%define m 4' in the code (opposite to cpp)
    -a         output FOR loop control and %define lines as comments
    -t         test if source is an iCa language file - status 1 if it is
    -h         this help text
    <src.ica>  iCa source file with array definiions
$Id: immac,v 1.17 2008/09/05 21:40:26 jw Exp $
.

use vars qw($opt_a $opt_o $opt_l $opt_e $opt_P $opt_t $opt_h);
require "getopts.pl";
&Getopts('ao:l:e:P:th');	# sets $opt_h if -h etc

if ($opt_h) {
    write STDERR; exit 2;	# -h, ouput Usage only
}

my %defs = ();
my @def;
my $df;

if ($opt_t) {
    $opt_o = $opt_e = $opt_l = '';
} else {
    if ($opt_o) {
	chmod (0644, $opt_o) == 1 or die "Can't chmod 0644 '$opt_o': $!" if -f $opt_o;
	open STDOUT, ">$opt_o" or die "Can't redirect stdout to '$opt_o': $!";
    }
    if ($opt_e) {
	chmod (0644, $opt_e) == 1 or die "Can't chmod 0644 '$opt_e': $!" if -f $opt_e;
	open STDERR, ">$opt_e" or die "Can't redirect stderr to '$opt_e': $!";
    }
    if ($opt_l) {
	chmod (0644, $opt_l) == 1 or die "Can't chmod 0644 '$opt_l': $!" if -f $opt_l;
	open LOG, ">$opt_l" or die "Can't create '$opt_l': $!";
    }
}

my @defines = split(' ', $opt_P);
foreach (@defines) {
    @def = split(/=/, $_);
    $df = shift(@def);		# enter -P NAME(s) in associative array %defs
    if ($df =~ /^[A-Z_a-z]\w*$/) {
	$defs{ $df } = @def ? join('=', @def) : '';
	warn "//* WARNING: '-P $df' has no value - should be '-P $df=value'\n" unless @def;
	print LOG "### COMMAND LINE -P $df=$defs{ $df }\n" if $opt_l;
	print "//***** -P $_\n" if $opt_a;
    } else {
	warn "//* WARNING: -P '$df' has bad characters - ignored in command line\n";
    }
}

my $ret = 0;
while ($ARGV = shift @ARGV) {
    unless (open (IN, $ARGV)) {
	warn "can't open input $ARGV";
	next;
    }
    print LOG "##### $named $ARGV\n" if $opt_l;
    $ret = processFile();
    close(IN);
}

if ($opt_l) {
    close LOG;
    chmod (0444, $opt_l) == 1 or die "Can't chmod 0444 '$opt_l': $!";
}
if ($opt_e) {
    chmod (0444, $opt_e) == 1 or die "Can't chmod 0444 '$opt_e': $!";
}
if ($opt_o) {
    chmod (0444, $opt_o) == 1 or die "Can't chmod 0444 '$opt_o': $!";
}
exit $ret;

####################################################################
#
#	process one file
#
####################################################################

sub processFile {

    my $r = 0;
    my ($identifier, %identifiers, $atom, @atoms, @block, $line, $offset, $lookfor, $pos, $prev);
    my ($translate, $control, $finBlock, $inBlock, $braceCount, $evalBlock, $comment, @ids, $el);
    my ($lfFlag, $spOfs, $Cdirective, $directive, $compound, $state, @error, $error, %forHash);
    my ($len, $square, $sqSave, $sqOffs, $sqNest, @sqError, $forFlag, $iesFlag, $litFlag);
    @block = ();
    %forHash = ();
    $state = "A";				# outside of comments and quotes
    $forFlag = $iesFlag = $braceCount = $finBlock = $inBlock = $lfFlag = $spOfs = $Cdirective = 0;
    $directive = '';
    undef $compound;
    while (<IN>) {
	$control = 0;
	if (/#\s*define/ or $Cdirective) {
	    $Cdirective = /\\$/ ? 1 : 0;	# #define or %#define output as is
	    print unless $opt_t;		# with direct print - cpp handles it
	    next;				# must not modify bacause of comments
	}
	if (keys %defs) {			# resolve %define macros if any
	    $offset = 0;
	    $prev='';
	    undef $pos;
	    while (/([A-Z_a-z]\w*)/g) {		# look for 'words' in this line
		$atom = $1;			# 'word' found
		# suppress translation of redefined macro name (first word after %define)
		if (defined($translate = $defs{ $atom }) and
		    ($prev ne 'define' or defined $pos)
		) {
		    return 1 if $opt_t;		# test has found iCa code
		    $pos  = length $`;		# $` position of 'word' found
		    print LOG "### OLD '$atom' '$translate' in $.: $_" if $opt_l and $offset++ == 0;
		    substr($_, $pos, length $atom) = $translate;
		    print LOG "### SUB '$atom' '$translate' in $.: $_" if $opt_l;
		}
		$prev = $atom;
	    }
	}
	$comment = $_;
	if (/^\s*%\s*\bdefine\b/ or $directive) {
	    if (s/\\$//) {
		chomp;
		s!(\s*(/[*/]|#).*|[ \t]+)$!!;	# delete C, C++ or Perl comment and traling blanks
		s/^\s+/ /;			# change leading blanks to 1 space
		$directive = "$directive$_";	# concatenate %define lines terminated by '\'
	    } else {
		if ($directive) {
		    s/^\s+/ /;
		    $_ = "$directive$_";
		    $directive = '';
		}
		if (/^\s*%\s*\bdefine\b\s+(\S+)\s+(\S.*)$/) {
		    return 1 if $opt_t;		# test has found iCa code %define
		    $identifier = $1;
		    $translate  = $2;
		    if ($identifier =~ /^[A-Z_a-z]\w*$/) {
			if (defined $defs{ $identifier }) {
			    print LOG "### command line definition '$identifier=$defs{ $identifier }' has precedence over %define\n" if $opt_l;
			    print "//***** -P $identifier=$defs{ $identifier } has precedence over $_" if $opt_a;
			} else {
			    $translate =~ s!(\s*(/[*/]|#).*|[ \t]+)$!!;	# delete C, C++ or Perl comment and traling blanks
			    $defs{ $identifier } = $translate;		# macro to %defs eg %define X (4 * 8)
			    print LOG "### $_" if $opt_l;
			    print "//***** $_" if $opt_a;
			}
		    } else {
			warn "//* WARNING: %define '$identifier' has bad characters - ignored at '$ARGV' line $.\n";
		    }
		}
	    }
	    next;				# do not output %define line
	}

	########################################################################
	#   Start of detailed analysis of code lines
	#   extract atoms to drive state machine - save with position
	#   ignore leading back slash pairs
	#   include odd back slash to change atom for some lookups
	########################################################################
	@atoms = ();
	$litFlag = $sqNest = $square = $offset = 0;
	while (/((\\\\)*)(\\?("|'|\/\*|\/\/|\*\/|{|}|\[|\]|[A-Z_a-z]\w*|\n))/g) {
	    push @atoms, [ length($`)+length($1), $3 ];		# [ $pos, $atom ]
	}
	########################################################################
	#   check atoms in sequence - positions in line may change now
	#   translate atoms only in square brackets in code, comments and strings
	#   and in iCa FOR { control lines
	########################################################################
	$litFlag = 1 if /^\s*%{/ and $state eq "A";	# start of literal block in iC code
	for (my $aix = 0; $aix < @atoms; $aix++) {
	    my $ref = $atoms[$aix];
	    ( $pos, $atom ) = @$ref;
	    if (($square or $forFlag) and
		$atom =~ /[A-Z_a-z]\w*/) {
		if (defined($translate = $identifiers{ $atom })) {
		    $len = length $atom;	# translate in strings and comments also
		    substr($_, $pos + $offset, $len) = $translate;
		    $offset += length($translate) - $len;
		    $square |= 0x02 if $square;	# translation in square brackets
		} elsif ($square) {
		    $square |= 0x04;		# bare word in square brackets
		    push @sqError, $atom;
		} elsif ($state eq "A") {	# bare word in FOR line comment or string ignored
		    push(@error, "*** ERROR in $ARGV line $.: C variable '$atom' (bare word) in FOR line\n");
		    $r = 2;			# error return
		}

	    }
	    if ($square) {
		if ($atom eq "]") {
		    if ($square < 0x04 and ($square >= 0x02 or not defined $compound)) {
			substr($_, $pos + $offset, 1) = "]}";	# final change "{"
			$offset += 1;				# 2 - 1
		    } else {
			$_ = $sqSave;		# undo changes in square brackets
			$offset = $sqOffs;
			if ($square >= 0x06) {
			    push(@error, "*** ERROR in $ARGV line $.: [ ] has C variable(s) '@sqError' as well as iCa variable(s)\n");
			    $r = 2;		# error return
			}
			# if only C variables (bare words) in square brackets leave as C array expression
			# C array expressions with only constant values is not changed in iCa C code
		    }
		    $square = 0;		# closing square brackets
		} elsif ($atom eq "[") {
		    if (defined $compound) {
			$_ = $sqSave;		# undo changes in first square bracket
			$offset = $sqOffs;
			$sqNest = 1;
			goto startSquare;	# start nested square bracket in C code
		    }
		    push(@error, "### WARNING: $ARGV line $.: 2nd '[' found in square brackets\n");
		}
	    } elsif ($atom eq "[") {
	      startSquare:
		$square = 0x01;			# opening square brackets
		$sqSave = $_;			# save in case changes have to be undone
		$sqOffs = $offset;
		substr($_, $pos + $offset, 1) = "\@{[";	# provisonal change "}"
		$offset += 2;			# 3 - 1
		@sqError = ();
	    } elsif ($atom eq "]") {
		if ($sqNest) {
		    $sqNest = 0;		# no other change for outside nested square bracket
		} else {
		    push(@error, "### WARNING: $ARGV line $.: lone ']' found outside of square brackets\n");
		}
	    } else {
		if ($state eq "A") {		# iC - Program
		    if ($atom eq '"') {		# leading back slash will not compare
			$state = "S";		# start of string found
		    } elsif ($atom eq "'") {
			$state = "H";		# start of character constant found
		    } else {
			$atom =~ s/^\\//;	# no use for leading back slash any more
			if ($atom eq "/*") {
			    $state = "C";	# start of C comment found
			} elsif ($atom eq "*/") {
			    push(@error, "### WARNING: $ARGV line $.: */ found after end of comment\n");
			} elsif ($atom eq "//") {
			    $state = "C++";	# start of C++ comment found
			} elsif ($atom eq "{") {
			    if ($iesFlag or $litFlag) {	# end of if else switch or literal block control line
				$compound = $braceCount; # start of a C compound statement in iC code
				$iesFlag = $litFlag = 0;
			    }
			    if ($forFlag and not $control) {
				$spOfs = $control = 2;	# free standing brace
			    }
			    $forFlag = 0;	# stop translating atoms in FOR control line
			    $braceCount++;	# current brace count
			} elsif ($atom eq "}") {
			    --$braceCount;
			    if (defined $compound) {
				undef $compound if $braceCount <= $compound; # end of C compound statement
			    }
			    if (defined $forHash{ $braceCount }) {
				$inBlock--;	# FOR control block finishes with brace
				if (s/\\$//) {
				    $control = 4;
				    $comment =~ s/\\$//;
				} else {
				    $control = 3;
				}
				$spOfs = 0;
				delete $forHash{ $braceCount };
				delete $identifiers{ pop @ids };	# latest $identifier out of scope
			    }
			    if ($braceCount <= 0) {
				$inBlock = 0;	# should not be necessary
			    }
			} elsif ($atom eq "FOR") {
			    return 1 if $opt_t;		# test has found iCa code 'FOR loop'
			    substr($_, $pos + $offset, 3) = "for";	# 'FOR' changed to Perl 'for'
			  retry:
			    $ref = $atoms[$aix + 1];	# next atom in @atoms [int] $identifier
			    if (ref($ref) eq "ARRAY") {
				( $pos, $identifier ) = @$ref;
				if ($identifier eq "int") {
				    substr($_, $pos + $offset, 4) = "";
				    $offset -= 4;
				    $aix++;			# skip over "int"
				    goto retry;
				}
				$forFlag = 1;		# translate atoms till next brace
				substr($_, $pos + $offset, 0) = "my ";
				$offset += 3;
				if (@block == 0) {
				    %identifiers = ();
				    @ids = ();
				    $braceCount = 0;
				    $el = $.;
				}
				if (not defined $identifiers{ $identifier }) {
				    if ($braceCount >= $inBlock) {
					if ($opt_a) {
					    my $id;
					    foreach $id (@ids) {
						$comment =~ s/\b$id\b/($id=$identifiers{ $id })/g;
					    }
					    unless ($comment =~ /{/) {	# }
						$comment =~ s/\)/) {/;	# } TODO: make more precise
					    }
					}
					push @ids, $identifier;		# each iCa FOR loop only has one $identifier
					$identifiers{ $identifier } = "\$$identifier";
					$finBlock = ++$inBlock;
					$spOfs = $control = 1;
					$forHash{ $braceCount } = 1;
				    } else {
					push(@error, "### WARNING: 'FOR (...)' not nested after previous '{' at '$ARGV' line $.\n"); # '}'
				    }
				} else {
				    push(@error, "### WARNING: 'FOR $identifier' used twice at '$ARGV' line $.\n");
				}
			    } else {
				push(@error, "### WARNING: 'FOR' not followed by identifier at '$ARGV' line $.\n");
			    }
			} elsif (not defined $compound and
			    ($atom eq "if" or $atom eq "else" or $atom eq "switch")) {
			    $iesFlag = 1;	# start of iC if else or switch control line
			}
		    }
		} elsif ($state eq "S") {	# string constant
		    if ($atom eq '"') {
			$state = "A";
		    }
		} elsif ($state eq "H") {	# character constant
		    if ($atom eq "'") {
			$state = "A";
		    }
		} else {
		    $atom =~ s/^\\//;		# no use for leading back slash any more
		    if ($state eq "C") {	# C comment
			if ($atom eq "*/") {
			    $state = "A";	# end of C comment found
			} elsif ($atom eq "/*") {
			    push(@error, "### WARNING: $ARGV line $.: /* found during comment\n");
			}
		    } elsif ($state eq "C++") {	# C++ comment
			if ($atom eq "\n") {
			    $state = "A";	# end of C++ comment found
			}
		    }
		}
	    }
	}
	########################################################################
	#   end of line analysis
	########################################################################
	if ($finBlock) {
	    $finBlock = $inBlock;
	    undef $compound if $compound == 0;
	    if (/(\@{\[|\]})/) {
		s/(\w)\s+\@{\[/${1}\@{[/g;	# remove spaces after array name
		s/\]}\s+(\w)/]}${1}/g;		# and before array continuation (rare)
		if (s/\]}\s*\@{\[/]}x\@{[/g) {	# insert x for multi-dimensional arrays
		    s/x(\@{\[[^\]]*"[^\]]*\]})/$1/g;# remove x before [exp?",":""] special
		}
		if (s/(\d)\@{\[/${1}y\@{[/g) {	# insert y for array name ending in numerals
		    s/y(\@{\[[^\]]*"[^\]]*\]})/$1/g;# remove y before [exp?",":""] special
		}
		s/\]}\[/]} [/g;			# insert space between ]}[ - needed for perl interpretation
	    }
	    if ($control or $forFlag) {
		if ($opt_a) {
		    $comment =~ s/\\/\\\\/g;	# protect interpolated \ in string
		    $comment =~ s/"/\\"/g;	# protect interpolated " in string
		    chomp $comment;
		    if ($lfFlag) {
			$comment = "print \"\\n//***** $comment\\n\";\n";
			$lfFlag = 0;		# lines terminated by '\' are now terminated by LF
		    } else {
			$comment = "print \"//***** $comment\\n\";\n";
		    }
		}
		s!(\s*(/[*/]|#).*|[ \t]+)$!!;	# delete C, C++ or Perl comment and traling blanks
	    } else {
		if ($braceCount < $finBlock) {
		    push(@error, "### WARNING: '{' must follow 'FOR (...)' at '$ARGV' line $.\n");	# "}"
		}
		s/\\/\\\\/g;			# protect interpolated \ in string
		s/"/\\"/g;			# protect interpolated " in string
		chomp;
		if (s/\\\\$//) {
		    if ($spOfs) {
			s/^(\s*)(\s)/$2/;
			if ($spOfs and $1) {
			    splice(@block, @block - $spOfs, 0, "print \"$1\";\n");
			}
		    }
		    $_ = "print \"$_\";\n";	# print line without LF in the FOR loop when eval'd
		    $lfFlag = 1;		# terminate the last line in the block with LF
		} else {
		    $_ = "print \"$_\\n\";\n";	# print line with LF in the FOR loop when eval'd
		    $lfFlag = 0;		# line already terminated wih LF
		}
		$spOfs = 0;			# was set in 'FOR line and brace'
	    }
	    if ($opt_a and $control == 1) {
		push(@block, $comment);		# "}" push the "FOR () {" comment line for eval
	    }
	    push(@block, $_);			# push the modified line for eval
	    if ($control >= 3) {
		if ($opt_a) {
		    push(@block, $comment);	# "{" push the "}" comment line for eval
		} elsif ($control == 3 and $lfFlag) {
		    push(@block, "print \"\\n\";\n");
		}
		$lfFlag = 0;			# lines terminated by '\' are now terminated by LF
	    }
	    if (not $finBlock) {
		print LOG "### evaL BLOCK @{[++$evalBlock]} at LINE $.\n", @block if $opt_l;
		eval "@block";
		if ($@) {
		    push(@error, "*** ERROR in $ARGV: $el: start of Perl eval\n");
		    $line = 0;
		    for (@block) {
			$line++;
			push(@error, " $line: $_");	# append eval output to iC file
		    }
		    push(@error, "*** ERROR in $ARGV: $.: end of Perl eval ($line lines)\n/**** error messages from Perl eval:\n$@  *** end error messages from Perl eval */\n");
		    $r = 2;			# error return
		}
		@block = ();			# end of this eval block
	    }
	} elsif (/(\@{\[|\]}|\\$)/
	    and not $opt_t	# do not return for [] outside 'FOR loop' - could be in comment
	) {			# can select either alternatives above or below
###	    return 1 if $opt_t;	# test has found iCa code [] outside 'for loop'
	    s/(\w)\s+\@{\[/${1}\@{[/g;		# remove spaces after array name
	    s/\]}\s+(\w)/]}${1}/g;		# and before array continuation (rare)
	    s/\]}\s*\@{\[/]}x\@{[/g;		# insert x for multi-dimensional arrays
	    s/(\d)\@{\[/${1}y\@{[/g;		# insert y for array name ending in numerals
	    s/\]}\[/]} [/g;			# insert space between ]}[ - needed for perl interpretation
	    s/\\/\\\\/g;			# protect interpolated \ in string
	    s/"/\\"/g;				# protect interpolated " in string
	    chomp;
	    if (s/\\\\$//) {
		$_ = "print \"$_\";\n";		# print line without LF in the FOR loop when eval'd
		$lfFlag = 1;			# terminate the last line in the block with LF
	    } else {
		$_ = "print \"$_\\n\";\n";	# print line with LF in the FOR loop when eval'd
		$lfFlag = 0;			# line already terminated wih LF
	    }
	    print LOG "### evaL LINE $.\n", $_ if $opt_l;
	    eval $_;				# evaluate constant expr eg. [4*8]
	    if ($@) {
		push(@error, "*** ERROR in $ARGV: $.: start of Perl eval\n");
		push(@error, " 1: $_");		# append eval output to iC file
		push(@error, "*** ERROR in $ARGV: $.: end of Perl eval (1 line)\n/**** error messages from Perl eval:\n$@  *** end error messages from Perl eval */\n");
		$r = 2;				# error return
	    }
	} else {
	    print unless $opt_t;		# faster if direct print
	}
    } continue {
	while ($error = shift @error) {
	    print "//$error" if $opt_o;		# output errors and warnings to output file
	    print LOG "$error" if $opt_l;	# output errors and warnings to log file
	    print STDERR "$error";		# output errors and warnings to terminal
	}
    }
    return $r;
} # processFile
__END__

############ POD to generate man page ##################################

=head1 NAME

 immac - the immediate-C array pre-compiler

=head1 SYNOPSIS

 immac [-ath][ -o<out>][ -l<log>][ -e<err>][ -Pmacro[=defn]...] <src.ica>
    -o <out>   name of generated iC output file (default: stdout)
    -l <log>   name of Perl log file            (default: none)
    -e <err>   name of error file               (default: stderr)
    -P <macro> predefine <macro> evaluated directly by this program
               Usually defined with a numeric value eg. -P m=8
               NOTE: command line definitions have precedence over
		     '%define m 4' in the code (opposite to cpp)
    -a         output FOR loop control and %define lines as comments
    -t         test if source is an iCa language file - status 1 if it is
    -h         this help text
    <src.ica>  iCa source file with array definiions

=head1 DESCRIPTION

B<immac> translates an iC-source with array definitions, called in iCa language
file (extension: .ica)
into an expanded iC language file (extension: .ic) which can be compiled with B<immcc>.

B<immac> reads and translates one source eg file.ica. If no options are specified,
output is to 'stdout' and compilation errors (if any) are reported on 'stderr'.
Normally output is stored in a file specified with the -o <output> option. Error messages
are included in the output file.

The B<immac> compiler can also produce an optional log file with the -l option,
which can be run as a Perl script to test 'FOR loop' generation. This produces
better error messages.

The B<immac> compiler can be used to test for iCa language constructs with the -t option.
If the source contains 'FOR loops', %define macro definitions or there are
B<immac> -P macro definitions, the source file is an iCa language file.
Isolated [index expressions] without at least one 'FOR loop' or %define
are not sufficient to classify a file as an iCa language file.

=head1 SPECIFICATION

 The immediate C language extension is as follows:

    immediate array variables are defined by appending an expression
    enclosed in square brackets to the array name eg. array[n+10]

    unless the expression in the square brackets is a constant
    expression eg. array[4+10], the line containing the expression
    must be contained in a FOR block as follows:

    FOR (int n; n < 32; n++) {
	array[n+10],
    }

    The following "perlish" syntax does the same, but is not
    recommended.

    FOR n (0 .. 31) {
	array[n+10],
    }

    The only reason it is included, is to generate irregular Perl type
    lists, which is unlikely to be an important feature.

    FOR n (0, 3, 4, 10, 5) {
	array[n],\
    }
    will generate array0, array3, array4, array10, array5,

    Only the control variable 'n' in the above instances may be used
    in the index expressions of the block. These 'FOR' blocks may
    be nested.  In that case all the control variables in each nested
    block may be used.

    Since this pre-processor only manipulates text, and does not
    compile, there are some restrictions. The 'FOR' line with or
    without the following opening brace and the braces must be
    on seperate lines. These are not part of the immediate C code
    itself. The lines are called control lines.  Control lines may
    terminate with a C /* ... */ or C++ // comment.  (They may in
    fact terminate with a Perl # comment). But a C comment in a
    control line must be completed on the line on which it starts.
    (C++ or Perl comments terminate on the one line anyway).

    Other immediate C lines in the block may contain bracketed index
    expressions, but they don't need to (they will of course not vary).

    All immediate C lines in a  'FOR' block are repeated a number of
    times controlled by the 'FOR' control line.

    The 'int' type specifier of the control variable is optional - it
    may be used in both variants to make the syntax look more correct.
    It must be remembered, that the control variable is usually an
    'int'.  In the Perl code, 'use integer' has been called, so
    integer division always applies - the following is valid:

    FOR (int n = 0; n < 16; n++) {
       QX[n/8].[n%8] = IB[n];
    }

    produces the following straight immediate C output

    QX0.0 = IB0;
    QX0.1 = IB1;
    ...
    QX1.6 = IB14;
    QX1.7 = IB15;

    which is not brilliant code, but shows the pattern.

    Both in C and by analogy in immediate C with arrays (iCa), index
    expressions surrounded by square brackets may be seperated from
    their array variable by white space. In iCa these index expressions
    must be in the same line - otherwise spaces and tabs are allowed.

    Multi-dimensional array indices have an 'x' inserted between indices
	eg: a [1] [2]  is replaced by a1x2
    Array names which finish with a numeral will have a 'y' inserted
    before the the first index
	eg: b8 [0]     is replaced by b8y0
	eg: b9 [1] [2] is replaced by b9y1x2
    If this were not done, the generated iC variables could be
    ambiguous. Also the mental conversion from the generated iC
    variable back to its array form is made easier this way.

    A line terminated by a back-slash '\' both inside or outside a
    'FOR loop' generates that line without a terminating LF '\n'.
    This allows the generation of lists in a single line.  Normally a
    LF is inserted on the termination of the 'FOR loop' unless the
    final brace is also followed by a back-slash '\' - then the line
    is not terminated by a LF '\n'.

    Index expressions which contain a '"' marking a string do not have
    x or y inserted before them. This is used as follows
	eg: b8 [n<MAX ? "," : ";"]
    terminates an expression with either a comma or a semi-colon.
    This is useful to terminate a single line comma separated list.

	imm int\
    FOR (n = 0; n <= 4; n++) {
      a [n] [n < 4 ? "," : ";"]\
    }\
	/* declaration statement */
    produces the following statement:
	imm int	a0, a1, a2, a3, a4;	/* declaration statement */

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<ic@je-wulff.de> with L<iC Project> in the
subject field.

=head1 SEE ALSO

L<immcc(1)>, L<iCmake(1)>, L<iCserver(1)>, L<iCbox(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2008  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.

=cut

############ end of POD to generate man page ###########################
