/********************************************************************
 *
 *	bar3.ic - vertical bar demo
 *
 *	QX0 outputs the value of a shift register made up of SR flip
 *	flops m0 to m7. These are clocked by an internally generated
 *	clock c0. It looks like running lights when displayed.
 *
 *	By changing the input IB1 the clocking speed on m0 to m7,
 *	which is output on QX0.0 to QX0.7 is set to IB1 * 50 ms.
 *	A value of 0 on input IB1 lets you clock the running
 *	lights manually via input IX0.0
 *
 *	Output QX2.0 indicates the direction of the running
 *	lights on QX0 - just to show a bit of internal logic.
 *
 *******************************************************************/

imm timer t = TIMER(TX0.4);

imm int d0 = IB1;			// IB1 =
imm int a;				// a   =
imm bit f0 = IB1;			// d0  =

imm bit b0 = D(~b0 & f0, t, d0) | CHANGE(IX0.0 & ~f0);
imm clock c0 = CLOCK(b0);

imm bit m0 = SR(~m8     , m8 & ~m1, c0);
imm bit m1 = SR(~m8 & m0, m8 & ~m2, c0);
imm bit m2 = SR(~m8 & m1, m8 & ~m3, c0);
imm bit m3 = SR(~m8 & m2, m8 & ~m4, c0);
imm bit m4 = SR(~m8 & m3, m8 & ~m5, c0);
imm bit m5 = SR(~m8 & m4, m8 & ~m6, c0);
imm bit m6 = SR(~m8 & m5, m8 & ~m7, c0);
imm bit m7 = SR(~m8 & m6, m8      , c0);
imm bit m8 = SR(~m8 & m7, m8 & ~m0, c0);

QX0.0 = m0;
QX0.1 = m1;
QX0.2 = m2;
QX0.3 = m3;
QX0.4 = m4;
QX0.5 = m5;
QX0.6 = m6;
QX0.7 = m7;
QX2.0 = m8;

QX2.1 = f0;

/********************************************************************
 *
 *	Some miscellaneous logic and clocked logic statements
 *
 *******************************************************************/

QX2.2 = (IX2.0 & IX2.1 & IX2.2) |
        (IX2.3 & IX2.4 & IX2.5) ;

QX2.3 =  IX2.6 ^  IX2.7 |	// simple XOR
         IX0.1 & ~QX2.4 |	// turn on delay below used in expression
	 a >= 4;		// arithmetic comparison as logic value
				// a is assigned in middle of last line
QX2.4 =  D(  IX0.1,  t, 10);	// 1 second turn on delay  (10 * 100 ms)
QX2.5 = ~D(~(IX0.2), t, 20);	// 2 second turn off delay (30 * 100 ms)
QX2.6 =  SRT(IX0.3,  t, 30);	// 3 second mono flop      (20 * 100 ms)

QX2.7 =  D(~QX2.7, c1 = CLOCK(CHANGE(a = d0/5))); // work out this one! a =
QB1   =  SHR(QB1 + 1, c1, CHANGE(IX0.4)); // count c1 clock pulses // QB1 =
