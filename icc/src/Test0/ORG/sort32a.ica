/********************************************************************
 *
 *	Parcel sorter for long belts
 *	Author:	J.E. Wulff
 *	Source: sort32.icx
 *
 *	Trial source for using arrays in "iC programs"
 *
 *******************************************************************/

use strict;

/********************************************************************
 *
 *	Feeder segment
 *
 *******************************************************************/

imm bit feeder(			/* feeds code into feeder segment */
	imm bit transfer,	/* photo cell to transfer code */
 assign	imm int carryOut,	/* shift bit (as int) for the following segment */
	imm int code,		/* destination code - 0 .. 31 */
	imm int length,		/* sets the length of the segment */
	imm int width,		/* width of lock frame 6 + 6 for 0x7f */
	imm clock c,		/* stepping clock for the belt */
    )
{
    extern imm bit reset;	/* general re-initialisation */
    imm bit pip   = RISE(transfer & ~this & ~reset, c);
    imm int shift = SHR((shift << 1) + (pip * (0x41 + (code << 1))), c, reset);
    imm int mask  = 0x41 << width;
    carryOut = (shift >> length) & 1;
    this = SRX(pip,		/* unlock after width steps */
	       (shift & mask) == mask | reset, c);
}

/********************************************************************
 *
 *	Segment
 *
 *	Each segment controls one gate and may be up to 32 steps long
 *
 *******************************************************************/

imm bit segment(		/* returns gate control output */
	imm int carryIn,	/* shift bit (as int) from the previous segment */
 assign	imm int carryOut,	/* shift bit (as int) for the following segment */
	imm int code,		/* code identifying this segment */
	imm int length,		/* segment length */
	imm int width,		/* width of the gate */
	imm clock c,		/* stepping clock for the belt */
    )
{
    extern imm bit reset;	/* general re-initialisation */
    imm int shift = SHR((shift << 1) + carryIn, c, reset);
    imm int mask  = 0x41 << width;
    carryOut = (shift >> length) & 1;
    this = SRX((shift & 0x7f) == 0x41 + (code << 1),
	       (shift & mask) == mask | reset, c);
}

/********************************************************************
 *
 *	Belt
 *
 *	Each belt has 32 gates
 *
 *******************************************************************/

imm int belt(
    	assign	imm bit lock,	/* lock indicator */
  FOR i ('00' .. '31') {
	assign  imm bit gate[i],
  }
		imm int code,	/* gate code 0 .. 31  - for parcel destination */
		imm bit p_cell,	/* photo cell monitoring parcel onto belt */
		imm bit strobe,	/* strobe pulse from belt movement */
    )
{
  FOR i ('00' .. '32') {
    imm int car[i];		/* carry bit: [i] */
  }

    imm clock clk = CLOCK(strobe);

    lock   = feeder(p_cell, car[0], code, 12, 11, clk);
  FOR i ('00' .. '31') {
    gate[i] = segment(car[i], car[i+1],    [i], 12,  7, clk);
  }
    this = car[32];		/* allows concatenation of "belts" */
}

/********************************************************************
 *
 *	Generate tick
 *	input fast1 or fast2 cause 50 ms ticks
 *	else tick for every change of manual input
 *
 *******************************************************************/

imm bit tick(bit manual, bit fast1, bit fast2) {
    imm bit fast = fast1 | fast2;
    this = CHANGE(manual & ~fast | TX0.4 & fast);
}

/********************************************************************
 *
 *	4 belts
 *
 *	Each belt has 32 gates
 *
 *******************************************************************/

imm bit reset = IX0.7;		/* general re-initialisation */
  FOR i (0 .. 3) {

    QX16.[i] = belt(
	QX16.[i+4],		/* lock indicator */
      FOR j (0 .. 31) {
	QX[i*4+j/8].[j%8],
      }
	IB[i*4+3],		/* gate code 0 .. 31  - for parcel destination */
	IX[i*4].1,		/* photo cell monitoring parcel onto belt */
	tick(IX[i*4].0, IX[i*4].6, IX0.5),	/* "strobe pulse" from belt movement */
    );
  }
